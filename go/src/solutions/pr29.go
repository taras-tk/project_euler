package solutions

// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

// 22=4, 23=8, 24=16, 25=32
// 32=9, 33=27, 34=81, 35=243
// 42=16, 43=64, 44=256, 45=1024
// 52=25, 53=125, 54=625, 55=3125

// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

import (
	"fmt"
	"math/big"
)

func powInt(base int64, exp int64) *big.Int {
	bigBase := new(big.Int)
	bigBase.SetInt64(base)

	bigExp := new(big.Int)
	bigExp.SetInt64(exp)

	res := new(big.Int)
	res.Exp(bigBase, bigExp, nil)
	return res
}

func getSeries(minA int, maxA int, minB int, maxB int) (result []*big.Int) {
	for a := minA; a <= maxA; a++ {
		for b := minB; b <= maxB; b++ {
			number := powInt(int64(a), int64(b))
			isPresent := false
			for i := 0; i < len(result); i++ {
				if result[i].Cmp(number) == 0 {
					isPresent = true
					break
				}
			}
			if isPresent == false {
				result = append(result, number)
			}
		}
	}
	return
}

func Pr29() {
	// for _, num := range getSeries(2, 5, 2, 5) {
	// 	fmt.Println(num)
	// }
	// fmt.Println(getSeries(2, 5, 2, 5))
	fmt.Println(len(getSeries(2, 5, 2, 5)))
	fmt.Println(len(getSeries(2, 100, 2, 100)))
}

// Tarass-MBP-3:src todos$ time go run main.go
// 15
// 9183

// real    0m0.687s
// user    0m0.637s
// sys     0m0.099s
